module concurrent;
import java.io.*;
import java.util.*;
behavior GraphStats{
    String inputFile = "input.txt";
    List Actors = new ArrayList();
    String outputFileA;
    String outputFileB;

    List combinePartionsAnswerA(List t, List r)
    {
        List fin_fin = new ArrayList();
        List ret = (List) t;
        if(r.size() != 0){
            for(int i=0;i<ret.size();++i){
                List fin = new ArrayList();
                for(int j = 0; j < r.size(); j++){
                    List t1 =(List) ret.get(i);
                    List t2 =(List) r.get(j);
                    String c1 =(String) t1.get(0);
                    String c2 =(String) t2.get(0);
                    if(c1.equals(c2)){
                        String t1e1 = (String) t1.get(1);
                        String t1e2 = (String) t1.get(2);
                        String t2e1 = (String) t2.get(1);
                        String t2e2 = (String) t2.get(2);
                        int to_add_num = Integer.parseInt(t1e1);
                        int to_add_deg = Integer.parseInt(t1e2);
                        int to_add_num_1 = Integer.parseInt(t2e1);
                        int to_add_deg_1 = Integer.parseInt(t2e2);
                        int f_num = to_add_num + to_add_num_1;
                        int f_deg = to_add_deg + to_add_deg_1;
                        fin.add(c1);
                        fin.add(f_num);
                        fin.add(f_deg);
                    }
                    fin_fin.add(fin);
                }
            }
            return fin_fin;
        }else{
            fin_fin = t;
            return fin_fin;
        }
    }

    List combinePartionsAnswerA_better(List t, List current)
    {
        Map current_counts;
        Map current_degrees;
        List BigMoney = new ArrayList();
        Map counts = new HashMap();
        Map degrees = new HashMap();
        if(current.size()==2)
        {

        
            current_counts = (Map) current.get(0);
            current_degrees = (Map) current.get(1);
            Set current_colors = (Set) current_counts.keySet();
            Iterator current_itr = current_colors.iterator();

            while(current_itr.hasNext())
            {
                String color = (String) current_itr.next();

                String c_at_itr = (String) current_counts.get(color);
                int count_at_itr = Integer.parseInt(c_at_itr);

                String d_at_itr = (String) current_degrees.get(color);
                int degree_at_itr = Integer.parseInt(d_at_itr);

                counts.put(color, count_at_itr);
                degrees.put(color, degree_at_itr);

            }
        }
        else
        {
            current_counts = new HashMap();
            current_degrees = new HashMap();
        }

        Map color_to_count = (Map) t.get(0);
        Map color_to_degree = (Map) t.get(1);

        Set colors = (Set) color_to_count.keySet();

        Iterator itr = colors.iterator();

        while(itr.hasNext())
        {
            String color = (String) itr.next();

            int c_at_itr =(int) color_to_count.get(color);

            int d_at_itr = (int) color_to_degree.get(color);

            if(current_counts.containsKey(color))
            {
                int c = (int) current_counts.get(color);
                int d = (int) current_degrees.get(color);

                counts.put(color, c+c_at_itr);
                degrees.put(color, d+d_at_itr);
            }
            else
            {
                counts.put(color, c_at_itr);
                degrees.put(color, d_at_itr);
            }
        }
        BigMoney.add(counts);
        BigMoney.add(degrees);
        standardOutput<-println("AAAAAA");
        return BigMoney;

    }

    void act(String[] args)
    {
        Vector LinesInFile = new Vector();
        String line;
        try {
            BufferedReader in  = new BufferedReader(new FileReader(inputFile));
            while((line = in.readLine())!=null)
            {
                LinesInFile.add(line);
            }
            in.close();
        } catch(IOException ioe)
        {
            standardError<-println("[error] can't open file");

        }
        int a = 0;
        List NodeList = new ArrayList();
        List ColorList = new ArrayList();
        List EdgeList = new ArrayList();
        for (int i=0;i<LinesInFile.size();i++)
        {
            if(i%4==0)
            {
                String s = (String) LinesInFile.get(i);
                int act = (int) Integer.parseInt((String) s.split(" ")[1]);
                a = act;
            }
            else if(i%4==1)
            {
                String Line = (String) LinesInFile.get(i);
                NodeList = Arrays.asList(Line.split(","));
            }
            else if(i%4==2)
            {
                String Line = (String) LinesInFile.get(i);
                ColorList = Arrays.asList(Line.split(","));
            }

            else if(i%4==3)
            {
                String Line = (String) LinesInFile.get(i);
                String[] temp = Line.split(" ");
                EdgeList = Arrays.asList(temp);
                List Edges = new ArrayList();
                for(int j=0;j<EdgeList.size();++j)
                {
                    String p = (String) EdgeList.get(j);
                    String[] splitp = p.split(",");
                    Edges.add(splitp);
                }
                Partitions p = new Partitions(a, NodeList, ColorList, Edges);
                Actors.add(p);

            } 
        }
        List answer = new ArrayList();
        List tokens = new ArrayList();
        for(int i=0;i<Actors.size();++i)
        {
            Partitions aAtI = (Partitions) Actors.get(i);
            token t = aAtI<-computePartA_better();

            tokens.add(t);
            
            token t1 = combinePartionsAnswerA_better(t,answer);
        }

        for(int i=0;i<tokens.size();++i)
        {
        }
        

    }
    // sum(token) @
	//       display(token);
    // }

    // int sum(Object[] results){
	// int s = 0;
	// for (int i=0; i<n; i++)
	//     s += (Integer) results[i];
    //     return s;
    // }

    // void display(int total){
	// standardOutput<-println("The sum of first "+n+" squares is: " + total);
    // }
    
}