module concurrent;
import java.io.*;
import java.util.*;
behavior GraphStats{
    String inputFile = "input.txt";
    List Actors = new ArrayList();
    String outputFileA;
    String outputFileB;

    void act(String[] args)
    {
        Vector LinesInFile = new Vector();
        String line;
        try {
            BufferedReader in  = new BufferedReader(new FileReader(inputFile));
            while((line = in.readLine())!=null)
            {
                LinesInFile.add(line);
            }
            in.close();
        } catch(IOException ioe)
        {
            standardError<-println("[error] can't open file");

        }
        int a = 0;
        List NodeList = new ArrayList();
        List ColorList = new ArrayList();
        List EdgeList = new ArrayList();
        for (int i=0;i<LinesInFile.size();i++)
        {
            if(i%4==0)
            {
                String s = (String) LinesInFile.get(i);
                int act = (int) Integer.parseInt((String) s.split(" ")[1]);
                a = act;
            }
            else if(i%4==1)
            {
                String Line = (String) LinesInFile.get(i);
                NodeList = Arrays.asList(Line.split(","));
            }
            else if(i%4==2)
            {
                String Line = (String) LinesInFile.get(i);
                ColorList = Arrays.asList(Line.split(","));
            }

            else if(i%4==3)
            {
                String Line = (String) LinesInFile.get(i);
                String[] temp = Line.split(" ");
                EdgeList = Arrays.asList(temp);
                List Edges = new ArrayList();
                for(int j=0;j<EdgeList.size();++j)
                {
                    standardOutput<-println(EdgeList.get(j));
                    String p = (String) EdgeList.get(j);
                    String[] splitp = p.split(",");
                    Edges.add(splitp);
                }
                Partitions p = new Partitions(a, NodeList, ColorList, Edges);
                Actors.add(p);
            } 
        }
        List answer = new ArrayList();
        join{
            for(int i=0;i<Actors.size();++i)
            {
                Partitions aAtI = (Partitions) Actors.get(i);
                token = aAtI<-computePartA()@
                combinePartionsAnswerA(l)@
            }
        }
    }
    // sum(token) @
	//       display(token);
    // }

    // int sum(Object[] results){
	// int s = 0;
	// for (int i=0; i<n; i++)
	//     s += (Integer) results[i];
    //     return s;
    // }

    // void display(int total){
	// standardOutput<-println("The sum of first "+n+" squares is: " + total);
    // }
}