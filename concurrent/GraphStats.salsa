module concurrent;
import java.io.*;
import java.util.*;
behavior GraphStats{
    String inputFile = "input.txt";
    List Actors = new ArrayList();
    String outputFileA;
    String outputFileB;


    List combinePartionsAnswerA_better(List t, List current)
    {
        Map current_counts;
        Map current_degrees;
        List BigMoney = new ArrayList();
        Map counts = new HashMap();
        Map degrees = new HashMap();
        current_counts = new HashMap();
        current_degrees = new HashMap();

        Map color_to_count = (Map) t.get(0);
        Map color_to_degree = (Map) t.get(1);

        Set colors = (Set) color_to_count.keySet();

        Iterator itr = colors.iterator();

        while(itr.hasNext())
        {
            String color = (String) itr.next();

            int c_at_itr =(int) color_to_count.get(color);

            int d_at_itr = (int) color_to_degree.get(color);

            if(current_counts.containsKey(color))
            {
                int c = (int) current_counts.get(color);
                int d = (int) current_degrees.get(color);

                counts.put(color, c+c_at_itr);
                degrees.put(color, d+d_at_itr);
            }
            else
            {
                counts.put(color, c_at_itr);
                degrees.put(color, d_at_itr);
            }
        }
        BigMoney.add(counts);
        BigMoney.add(degrees);
        standardOutput<-println("AAAAAA");
        return BigMoney;

    }

    void merge(Object[] results)
    {
        List BigMoney = new ArrayList();
        Map counts = new HashMap();
        Map degrees = new HashMap();

        for(int i=0;i<results.length;++i)
        {
            List r = (List) results[i];
            Map curr_counts = (Map) r.get(0);
            Map curr_degrees = (Map) r.get(1);

            Set current_colors = (Set) curr_counts.keySet();

            Iterator itr = current_colors.iterator();
            while(itr.hasNext())
            {
                String color = (String) itr.next();

                int c_at_itr =(int) curr_counts.get(color);

                int d_at_itr = (int) curr_degrees.get(color);

                if(counts.containsKey(color))
                {
                    int c = (int) counts.get(color);
                    int d = (int) degrees.get(color);

                    counts.put(color, c+c_at_itr);
                    degrees.put(color, d+d_at_itr);
                }
                else
                {
                    counts.put(color, c_at_itr);
                    degrees.put(color, d_at_itr);
                }
                
            }
            standardOutput<- println(curr_counts);
            standardOutput<- println(curr_degrees);
            standardOutput<- println();


        }
        BigMoney.add(counts);
        BigMoney.add(degrees);
        standardOutput<- println(BigMoney);
    }

    void act(String[] args)
    {
        Vector LinesInFile = new Vector();
        String line;
        try {
            BufferedReader in  = new BufferedReader(new FileReader(inputFile));
            while((line = in.readLine())!=null)
            {
                LinesInFile.add(line);
            }
            in.close();
        } catch(IOException ioe)
        {
            standardError<-println("[error] can't open file");

        }
        int a = 0;
        List NodeList = new ArrayList();
        List ColorList = new ArrayList();
        List EdgeList = new ArrayList();
        for (int i=0;i<LinesInFile.size();i++)
        {
            if(i%4==0)
            {
                String s = (String) LinesInFile.get(i);
                int act = (int) Integer.parseInt((String) s.split(" ")[1]);
                a = act;
            }
            else if(i%4==1)
            {
                String Line = (String) LinesInFile.get(i);
                NodeList = Arrays.asList(Line.split(","));
            }
            else if(i%4==2)
            {
                String Line = (String) LinesInFile.get(i);
                ColorList = Arrays.asList(Line.split(","));
            }

            else if(i%4==3)
            {
                String Line = (String) LinesInFile.get(i);
                String[] temp = Line.split(" ");
                EdgeList = Arrays.asList(temp);
                List Edges = new ArrayList();
                for(int j=0;j<EdgeList.size();++j)
                {
                    String p = (String) EdgeList.get(j);
                    String[] splitp = p.split(",");
                    Edges.add(splitp);
                }
                Partitions p = new Partitions(a, NodeList, ColorList, Edges);
                Actors.add(p);

            } 
        }
        List answer = new ArrayList();
        List tokens = new ArrayList();
        join{
        for(int i=0;i<Actors.size();++i)
        {
            Partitions aAtI = (Partitions) Actors.get(i);
            aAtI<-computePartA_better();

            
            
            //token t1 <- combinePartionsAnswerA_better(t,answer);
        }
        }@merge(token);

        
        

    }
    // sum(token) @
	//       display(token);
    // }

    // int sum(Object[] results){
	// int s = 0;
	// for (int i=0; i<n; i++)
	//     s += (Integer) results[i];
    //     return s;
    // }

    // void display(int total){
	// standardOutput<-println("The sum of first "+n+" squares is: " + total);
    // }
    
}