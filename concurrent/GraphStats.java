package concurrent;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.*;
import java.util.*;

public class GraphStats extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		GraphStats instance = (GraphStats)new GraphStats(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new GraphStats(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return GraphStats.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new GraphStats(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return GraphStats.getReferenceByLocation(new UAL(ual)); }
	public GraphStats(boolean o, UAN __uan)	{ super(false,__uan); }
	public GraphStats(boolean o, UAL __ual)	{ super(false,__ual); }
	public GraphStats(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public GraphStats(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public GraphStats(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public GraphStats()		{  }
	public GraphStats(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "concurrent.GraphStats", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public GraphStats self;
		public void updateSelf(ActorReference actorReference) {
			((GraphStats)actorReference).setUAL(getUAL());
			((GraphStats)actorReference).setUAN(getUAN());
			self = new GraphStats(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "concurrent.GraphStats$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		List Actors = new ArrayList();
		List external_nodes = new ArrayList();
		String outputFileA;
		String outputFileB;
		String input_filename;
		public List combinePartionsAnswerA_better(List t, List current) {
			Map current_counts;
			Map current_degrees;
			List BigMoney = new ArrayList();
			Map counts = new HashMap();
			Map degrees = new HashMap();
			current_counts = new HashMap();
			current_degrees = new HashMap();
			Map color_to_count = (Map)t.get(0);
			Map color_to_degree = (Map)t.get(1);
			Set colors = (Set)color_to_count.keySet();
			Iterator itr = colors.iterator();
			while (itr.hasNext()) {
				String color = (String)itr.next();
				int c_at_itr = (int)color_to_count.get(color);
				int d_at_itr = (int)color_to_degree.get(color);
				if (current_counts.containsKey(color)) {{
					int c = (int)current_counts.get(color);
					int d = (int)current_degrees.get(color);
					counts.put(color, c+c_at_itr);
					degrees.put(color, d+d_at_itr);
				}
}				else {{
					counts.put(color, c_at_itr);
					degrees.put(color, d_at_itr);
				}
}			}
			BigMoney.add(counts);
			BigMoney.add(degrees);
			return BigMoney;
		}
		public Map getExternalInfluence(List externalNodes, List Actors, int a) {
			Map externalDegrees = new HashMap();
			for (int i = 0; i<externalNodes.size(); i++){
				int externalNode = (int)externalNodes.get(i);
				Token nodeDegree = new Token("nodeDegree");
				{
					// token nodeDegree = Actors.get(a)<-degree(externalNode)
					{
						Object _arguments[] = { externalNode };
						Message message = new Message( self, Actors.get(a), "degree", _arguments, null, nodeDegree );
						__messages.add( message );
					}
				}
				externalDegrees.put(externalNode, nodeDegree);
			}
			return externalDegrees;
		}
		public List mergeExternalNodes(Object[] results, String outputFileB) {
			Set r = new HashSet();
			for (int i = 0; i<results.length; ++i){
				Set a = (Set)results[i];
				Iterator itr = a.iterator();
				while (itr.hasNext()) {
					int e = (int)itr.next();
					r.add(e);
				}
			}
			return new ArrayList(r);
		}
		public void m(List l, List actors, String outputFileB) {
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<actors.size(); ++i){
					for (int j = 0; j<l.size(); ++j){
						int node = (int)l.get(j);
						Partitions aAtI = (Partitions)actors.get(i);
						{
							// aAtI<-degree(node)
							{
								Object _arguments[] = { node };
								Message message = new Message( self, aAtI, "degree", _arguments, null, token_2_0 );
								__messages.add( message );
							}
						}
					}
				}
				addJoinToken(token_2_0);
				// external_node_to_degree(token, outputFileB)
				{
					Object _arguments[] = { token_2_0, outputFileB };
					Message message = new Message( self, self, "external_node_to_degree", _arguments, token_2_0, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public Map external_node_to_degree(Object[] results, String outputFileB) {
			Map node_to_degrees = new HashMap();
			int degree_in_map = 0;
			for (int i = 0; i<results.length; i++){
				List r = (List)results[i];
				int degree = (int)r.get(0);
				int node = (int)r.get(1);
				if (node_to_degrees.containsKey(node)) {{
					int current_degree = (int)node_to_degrees.get(node);
					if (current_degree<=degree) {{
						node_to_degrees.put(node, degree);
					}
}				}
}				else {{
					node_to_degrees.put(node, degree);
					degree_in_map = degree;
				}
}			}
			return node_to_degrees;
		}
		public void merge(Object[] results, String outputFileA) {
			List BigMoney = new ArrayList();
			Map counts = new HashMap();
			Map degrees = new HashMap();
			for (int i = 0; i<results.length; ++i){
				List r = (List)results[i];
				Map curr_counts = (Map)r.get(0);
				Map curr_degrees = (Map)r.get(1);
				Set current_colors = (Set)curr_counts.keySet();
				Iterator itr = current_colors.iterator();
				while (itr.hasNext()) {
					String color = (String)itr.next();
					int c_at_itr = (int)curr_counts.get(color);
					int d_at_itr = (int)curr_degrees.get(color);
					if (counts.containsKey(color)) {{
						int c = (int)counts.get(color);
						int d = (int)degrees.get(color);
						counts.put(color, c+c_at_itr);
						degrees.put(color, d+d_at_itr);
					}
}					else {{
						counts.put(color, c_at_itr);
						degrees.put(color, d_at_itr);
					}
}				}
			}
			BigMoney.add(counts);
			BigMoney.add(degrees);
			{
				// standardOutput<-println(BigMoney)
				{
					Object _arguments[] = { BigMoney };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void act(String[] args) {
			String input_filename = (String)args[0];
			String outputFileA = (String)args[1];
			String outputFileB = (String)args[2];
			Vector LinesInFile = new Vector();
			String line;
			try {
				BufferedReader in = new BufferedReader(new FileReader(input_filename));
				while ((line=in.readLine())!=null) {
					LinesInFile.add(line);
				}
				in.close();
			}
			catch (IOException ioe) {
				{
					// standardError<-println("[error] can't open file")
					{
						Object _arguments[] = { "[error] can't open file" };
						Message message = new Message( self, standardError, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

			try {
				FileWriter myWriter = new FileWriter(outputFileB);
				myWriter.close();
			}
			catch (IOException e) {
				System.out.println("An error occurred.");
				e.printStackTrace();
			}

			int a = 0;
			List NodeList = new ArrayList();
			List ColorList = new ArrayList();
			List EdgeList = new ArrayList();
			for (int i = 0; i<LinesInFile.size(); i++){
				if (i%4==0) {{
					String s = (String)LinesInFile.get(i);
					int act = (int)Integer.parseInt((String)s.split(" ")[1]);
					a = act;
				}
}				else {if (i%4==1) {{
					String Line = (String)LinesInFile.get(i);
					NodeList = Arrays.asList(Line.split(","));
				}
}				else {if (i%4==2) {{
					String Line = (String)LinesInFile.get(i);
					ColorList = Arrays.asList(Line.split(","));
				}
}				else {if (i%4==3) {{
					String Line = (String)LinesInFile.get(i);
					String[] temp = Line.split(" ");
					EdgeList = Arrays.asList(temp);
					List Edges = new ArrayList();
					for (int j = 0; j<EdgeList.size(); ++j){
						String p = (String)EdgeList.get(j);
						String[] splitp = p.split(",");
						Edges.add(splitp);
					}
					Partitions p = ((Partitions)new Partitions(this).construct(a, NodeList, ColorList, Edges));
					Actors.add(p);
				}
}}}}			}
			Set externalNodes = new HashSet();
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<Actors.size(); ++i){
					Partitions aAtI = (Partitions)Actors.get(i);
					{
						// aAtI<-computePartA_better()
						{
							Object _arguments[] = {  };
							Message message = new Message( self, aAtI, "computePartA_better", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// merge(token, outputFileA)
				{
					Object _arguments[] = { token_2_0, outputFileA };
					Message message = new Message( self, self, "merge", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// printAnswerA(token, outputFileA)
				{
					Object _arguments[] = { token_2_1, outputFileA };
					Message message = new Message( self, self, "printAnswerA", _arguments, token_2_1, null );
					__messages.add( message );
				}
			}
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				Token token_2_2 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<Actors.size(); i++){
					Partitions aAtI = (Partitions)Actors.get(i);
					{
						// aAtI<-getExternal()
						{
							Object _arguments[] = {  };
							Message message = new Message( self, aAtI, "getExternal", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// mergeExternalNodes(token, outputFileB)
				{
					Object _arguments[] = { token_2_0, outputFileB };
					Message message = new Message( self, self, "mergeExternalNodes", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// m(token, Actors, outputFileB)
				{
					Object _arguments[] = { token_2_1, Actors, outputFileB };
					Message message = new Message( self, self, "m", _arguments, token_2_1, token_2_2 );
					__messages.add( message );
				}
				// combineEverything(token, Actors, outputFileB)
				{
					Object _arguments[] = { token_2_2, Actors, outputFileB };
					Message message = new Message( self, self, "combineEverything", _arguments, token_2_2, null );
					__messages.add( message );
				}
			}
		}
		public void combineEverything(Map external_node_to_degrees, List Actors, String outputFileB) {
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<Actors.size(); ++i){
					Partitions aAtI = (Partitions)Actors.get(i);
					{
						// aAtI<-CalcMostInfluential(external_node_to_degrees, outputFileB, i)
						{
							Object _arguments[] = { external_node_to_degrees, outputFileB, i };
							Message message = new Message( self, aAtI, "CalcMostInfluential", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// printG(token, outputFileB)
				{
					Object _arguments[] = { token_2_0, outputFileB };
					Message message = new Message( self, self, "printG", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
		public void printG(Object[] results, String outputFileB) {
			Set final_set = new HashSet();
			for (int i = 0; i<results.length; ++i){
				Set nodes = (Set)results[i];
				if (nodes==null) {{
continue;				}
}				final_set.addAll(nodes);
			}
			try {
				FileWriter myWriter = new FileWriter(outputFileB, true);
				Iterator itr = final_set.iterator();
				myWriter.write("G: ");
				while (itr.hasNext()) {
					int i = (int)itr.next();
					myWriter.write(i+",");
				}
				myWriter.close();
			}
			catch (IOException e) {
				{
					// standardError<-println("An error occurred.")
					{
						Object _arguments[] = { "An error occurred." };
						Message message = new Message( self, standardError, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				e.printStackTrace();
			}

		}
		public void printAnswerA(Object[] results, String outputFileA) {
			for (int i = 0; i<results.length; ++i){
				List r = (List)results[i];
				int degree = (int)r.get(0);
				Set nodes = (Set)r.get(1);
				{
					// standardOutput<-println("degree: "+degree)
					{
						Object _arguments[] = { "degree: "+degree };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				{
					// standardOutput<-println("nodes: "+nodes)
					{
						Object _arguments[] = { "nodes: "+nodes };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
		}
	}
}