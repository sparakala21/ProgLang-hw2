module concurrent;
import java.io.*;
import java.util.*;
behavior GraphStats{
    List Actors = new ArrayList();
    List external_nodes = new ArrayList();
    String outputFileA;
    String outputFileB;
    String input_filename;
    String nameServer = "127.0.0.1";

    List combinePartionsAnswerA_better(List t, List current)
    {
        Map current_counts;
        Map current_degrees;
        List BigMoney = new ArrayList();
        Map counts = new HashMap();
        Map degrees = new HashMap();
        current_counts = new HashMap();
        current_degrees = new HashMap();

        Map color_to_count = (Map) t.get(0);
        Map color_to_degree = (Map) t.get(1);

        Set colors = (Set) color_to_count.keySet();

        Iterator itr = colors.iterator();

        while(itr.hasNext())
        {
            String color = (String) itr.next();

            int c_at_itr =(int) color_to_count.get(color);

            int d_at_itr = (int) color_to_degree.get(color);

            if(current_counts.containsKey(color))
            {
                int c = (int) current_counts.get(color);
                int d = (int) current_degrees.get(color);

                counts.put(color, c+c_at_itr);
                degrees.put(color, d+d_at_itr);
            }
            else
            {
                counts.put(color, c_at_itr);
                degrees.put(color, d_at_itr);
            }
        }
        BigMoney.add(counts);
        BigMoney.add(degrees);
        return BigMoney;

    }

    Map getExternalInfluence(List externalNodes, List Actors, int a) {
        Map externalDegrees = new HashMap();

        for (int i = 0; i < externalNodes.size(); i++) {
            int externalNode = (int) externalNodes.get(i);

            token nodeDegree = Actors.get(a) <- degree(externalNode); 

            externalDegrees.put(externalNode, nodeDegree);
        }

        return externalDegrees;
    }

    List mergeExternalNodes(Object[] results, String outputFileB)
    {
        Set r = new HashSet();

        for(int i=0;i<results.length;++i)
        {
            Set a = (Set) results[i];
            Iterator itr = a.iterator();
            while(itr.hasNext())
            {
                int e = (int) itr.next();
                r.add(e);
            }
        }
        return new ArrayList(r);
        
    }

    void m(List l, List actors, String outputFileB)
    {
        join{
            for(int i=0;i<actors.size();++i)
            {
                for(int j=0;j<l.size();++j)
                {   
                    
                    int node = (int) l.get(j);
                    Partitions aAtI = (Partitions) actors.get(i);
                    aAtI <- degree(node);
                    
                }
            }
        }@external_node_to_degree(token, outputFileB)@currentContinuation;
    }



    Map external_node_to_degree(Object[] results, String outputFileB)
    {   
        Map node_to_degrees = new HashMap();
        int degree_in_map = 0;
        for(int i=0;i<results.length;i++)
        {
            List r = (List) results[i];
            int degree = (int) r.get(0);
            int node = (int) r.get(1);
            if(node_to_degrees.containsKey(node))
            {
                int current_degree = (int) node_to_degrees.get(node);
                if(current_degree<=degree)
                {
                    node_to_degrees.put(node, degree);
                }
            }
            else{
                node_to_degrees.put(node, degree);
                degree_in_map = degree;
            }
        }
        return node_to_degrees;
    }

    List merge(Object[] results, String outputFileA)
    {
        List BigMoney = new ArrayList();
        Map counts = new HashMap();
        Map degrees = new HashMap();

        for(int i=0;i<results.length;++i)
        {
            List r = (List) results[i];
            Map curr_counts = (Map) r.get(0);
            Map curr_degrees = (Map) r.get(1);

            Set current_colors = (Set) curr_counts.keySet();

            Iterator itr = current_colors.iterator();
            while(itr.hasNext())
            {
                String color = (String) itr.next();

                int c_at_itr =(int) curr_counts.get(color);

                int d_at_itr = (int) curr_degrees.get(color);

                if(counts.containsKey(color))
                {
                    int c = (int) counts.get(color);
                    int d = (int) degrees.get(color);

                    counts.put(color, c+c_at_itr);
                    degrees.put(color, d+d_at_itr);
                }
                else
                {
                    counts.put(color, c_at_itr);
                    degrees.put(color, d_at_itr);
                }
                
            }


        }
        BigMoney.add(counts);
        BigMoney.add(degrees);
        standardOutput<- println(BigMoney);
        return BigMoney;
    }

    void act(String[] args)
    {   
      Vector theaters = new Vector();
      String theater;
        String input_filename = (String) args[0];
        String outputFileA = (String) args[1];
        String outputFileB = (String) args[2];
        String theatersFile = (String) args[4];
        Vector LinesInFile = new Vector();
        String line;
        try {
          BufferedReader in = new BufferedReader(new FileReader(theatersFile));
          while ((theater = in.readLine())!= null){
            theaters.add(theater);
              }
              in.close(); 
        } catch (IOException ioe){
            standardError<-println("[error] Can't open the file "+theatersFile+" for reading.");
        }
        try {
            BufferedReader in  = new BufferedReader(new FileReader(input_filename));
            while((line = in.readLine())!=null)
            {
                LinesInFile.add(line);
            }
            in.close();
        } catch(IOException ioe)
        {
            standardError<-println("[error] can't open file");
        }
        try {
            // Open the file without appending, this will overwrite its content
            FileWriter myWriter = new FileWriter(outputFileB);
            myWriter.close();
            } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        try {
            // Open the file without appending, this will overwrite its content
            FileWriter myWriter = new FileWriter(outputFileA);
            myWriter.close();
            } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        int a = 0;
        List NodeList = new ArrayList();
        List ColorList = new ArrayList();
        List EdgeList = new ArrayList();
        for (int i=0;i<LinesInFile.size();i++)
        {
            if(i%4==0)
            {
                String s = (String) LinesInFile.get(i);
                int act = (int) Integer.parseInt((String) s.split(" ")[1]);
                a = act;
            }
            else if(i%4==1)
            {
                String Line = (String) LinesInFile.get(i);
                NodeList = Arrays.asList(Line.split(","));
            }
            else if(i%4==2)
            {
                String Line = (String) LinesInFile.get(i);
                ColorList = Arrays.asList(Line.split(","));
            }

            else if(i%4==3)
            {
                String Line = (String) LinesInFile.get(i);
                String[] temp = Line.split(" ");
                EdgeList = Arrays.asList(temp);
                List Edges = new ArrayList();
                for(int j=0;j<EdgeList.size();++j)
                {
                    String p = (String) EdgeList.get(j);
                    String[] splitp = p.split(",");
                    Edges.add(splitp);
                }
                String UANP = "uan://" + nameServer + "/s" + i;
                Partitions p = new Partitions(a, NodeList, ColorList, Edges) at (new UAN(UANP),new UAL("rmsp://" + theaters.get(i%theaters.size())));

                Actors.add(p);

            } 
        }
        Set externalNodes = new HashSet();

        join{
            for(int i=0;i<Actors.size();++i)
            {
                Partitions aAtI = (Partitions) Actors.get(i);
                aAtI<-computePartA_better();
            }
        }@merge(token, outputFileA)@printAnswerA(token, outputFileA):waitfor(token);

        

        join{
            for (int i = 0; i < Actors.size(); i++) 
            {
                
                Partitions aAtI = (Partitions) Actors.get(i);
                aAtI <- getExternal();
            }
        }@mergeExternalNodes(token, outputFileB)@m(token, Actors, outputFileB)@combineEverything(token, Actors, outputFileB);       
    }
    
    void combineEverything(Map external_node_to_degrees, List Actors, String outputFileB){
        join{
            for(int i=0;i<Actors.size();++i)
            {
                Partitions aAtI = (Partitions) Actors.get(i);
                aAtI <- CalcMostInfluential(external_node_to_degrees, outputFileB, i);
            }
        }@printG(token , outputFileB);
        
    }


    void printG(Object[] results ,String outputFileB){
        Set final_set = new HashSet();
        for(int i=0;i<results.length;++i)
        {
            Set nodes = (Set) results[i];
            if(nodes==null)
            {
                continue;
            }
            final_set.addAll(nodes);
        }
        
        try {
            FileWriter myWriter = new FileWriter(outputFileB, true);
            Iterator itr = final_set.iterator();
            myWriter.write("G: ");
            while(itr.hasNext()){
                int i = (int) itr.next();
                myWriter.write(i+",");
            }
            myWriter.close();
        } catch(IOException e)
        {
            standardError<-println("An error occurred.");
            e.printStackTrace();
        }
    }

    void printAnswerA(List results ,String outputFileA){
        if (results == null || results.size() != 2) {
            standardError<-println("Invalid input list");
            return;
        }
        Map nodesMap = (Map) results.get(0);
        Map degreesMap = (Map) results.get(1);

        // Getting all the colors (keys) from both maps and adding them to a TreeSet to automatically sort them.
        Set colors = new TreeSet();
        Set temp = (Set) nodesMap.keySet();
        colors.addAll(temp);
        Set temp1 = (Set) degreesMap.keySet();
        colors.addAll(temp1);

        Iterator itr = colors.iterator();
        try {
            FileWriter myWriter = new FileWriter(outputFileA, true);
            while (itr.hasNext()) {
                String color = (String) itr.next();
                int numOfNodes = (int) nodesMap.get(color);
                int numOfDegrees = (int) degreesMap.get(color);
                myWriter.write(color + ", " + numOfNodes + ", " + numOfDegrees + '\n');
            }
            myWriter.close();
        } catch(IOException e)
        {
            standardError<-println("An error occurred.");
            e.printStackTrace();
        }

    }
    
}